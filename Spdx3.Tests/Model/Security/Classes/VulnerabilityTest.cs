using Spdx3.Model.Core.Classes;
using Spdx3.Model.Core.Enums;
using Spdx3.Model.Security.Classes;
using Spdx3.Tests.Model.Extension.Classes;

namespace Spdx3.Tests.Model.Security.Classes;

public class VulnerabilityTest : BaseModelTestClass
{
    [Fact]
    public void Vulnerability_MinimalObject_ShouldDeserialize()
    {
      // Arrange
      const string json = """
                              {
                                "creationInfo": "urn:CreationInfo:3f5",
                                "type": "security_Vulnerability",
                                "spdxId": "urn:Vulnerability:402"
                              }
                              """;
          
      // Act
      var vulnerability = FromJson<Vulnerability>(json);
          
      // Assert
      Assert.NotNull(vulnerability);
      Assert.Equal(new Uri("urn:Vulnerability:402"), vulnerability.SpdxId);
    }


    [Fact]
    public void Vulnerability_MinimalObject_ShouldSerialize()
    {
        // Arrange
        var vulnerability = new Vulnerability(TestCatalog, TestCreationInfo);
        const string expected = """
                                {
                                  "creationInfo": "urn:CreationInfo:3f5",
                                  "type": "security_Vulnerability",
                                  "spdxId": "urn:Vulnerability:40f"
                                }
                                """;
        
        // Act
        var json = ToJson(vulnerability);
        
        // Assert
        Assert.Equal(expected, json);
    }
    
    [Fact]
    public void Vulnerability_PopulatedObject_ShouldSerialize()
    {
        // Arrange
        var vulnerability = new Vulnerability(TestCatalog, TestCreationInfo)
        {
            ReleaseTime = PredictableDateTime,
            ModifiedTime = PredictableDateTime.AddDays(1),
            PublishedTime = PredictableDateTime.AddDays(2),
            WithdrawnTime = PredictableDateTime.AddDays(3),
            ValidUntilTime = PredictableDateTime.AddDays(4),
            SuppliedBy = new Person(TestCatalog, TestCreationInfo),
            Comment = "a comment",
            Description = "a description",
            Summary = "a summary",
            Name = "a name",
            StandardName = "a standard name"
        };
        vulnerability.Extension.Add(new TestExtension(TestCatalog));
        vulnerability.ExternalIdentifier.Add(new ExternalIdentifier(TestCatalog, ExternalIdentifierType.email, "example@example.com"));
        vulnerability.ExternalRef.Add(new ExternalRef(TestCatalog, ExternalRefType.documentation));
        vulnerability.OriginatedBy.Add(new Organization(TestCatalog, TestCreationInfo));
        vulnerability.SupportLevel.Add(SupportType.noAssertion);
        vulnerability.VerifiedUsing.Add(new Hash(TestCatalog, HashAlgorithm.md2, "123"));

        const string expected = """
                                {
                                  "security_modifiedTime": "2025-02-23T01:23:45Z",
                                  "security_publishedTime": "2025-02-24T01:23:45Z",
                                  "security_withdrawnTime": "2025-02-25T01:23:45Z",
                                  "originatedBy": [
                                    "urn:Organization:450"
                                  ],
                                  "releaseTime": "2025-02-22T01:23:45Z",
                                  "standardName": "a standard name",
                                  "suppliedBy": "urn:Person:41c",
                                  "supportLevel": [
                                    "noAssertion"
                                  ],
                                  "validUntilTime": "2025-02-26T01:23:45Z",
                                  "comment": "a comment",
                                  "creationInfo": "urn:CreationInfo:3f5",
                                  "description": "a description",
                                  "extension": [
                                    "urn:TestExtension:429"
                                  ],
                                  "externalIdentifier": [
                                    "urn:ExternalIdentifier:436"
                                  ],
                                  "externalRef": [
                                    "urn:ExternalRef:443"
                                  ],
                                  "name": "a name",
                                  "summary": "a summary",
                                  "verifiedUsing": [
                                    "urn:Hash:45d"
                                  ],
                                  "type": "security_Vulnerability",
                                  "spdxId": "urn:Vulnerability:40f"
                                }
                                """;
        
        // Act
        var json = ToJson(vulnerability);
        
        // Assert
        Assert.Equal(expected, json);
    }

}
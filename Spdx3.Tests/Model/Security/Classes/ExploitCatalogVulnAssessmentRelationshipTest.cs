using Spdx3.Model.Core.Classes;
using Spdx3.Model.Core.Enums;
using Spdx3.Model.Security.Classes;
using Spdx3.Model.Security.Enums;
using Spdx3.Model.Software.Classes;
using Spdx3.Tests.Model.Extension.Classes;

namespace Spdx3.Tests.Model.Security.Classes;

public class ExploitCatalogVulnAssessmentRelationshipTest : BaseModelTest
{
    [Fact]
    public void ExploitCatalogVulnAssessmentRelationship_MinimalObject_ShouldDeserialize()
    {
        // Arrange
        const string json = """
                            {
                              "security_catalogType": "kev",
                              "security_exploited": "true",
                              "security_locator": "urn:locator",
                              "creationInfo": "urn:CreationInfo:3f5",
                              "type": "security_ExploitCatalogVulnAssessmentRelationship",
                              "spdxId": "urn:ExploitCatalogVulnAssessmentRelationship:402"
                            }
                            """;

        // Act
        var exploitCatalogVulnAssessmentRelationship = FromJson<ExploitCatalogVulnAssessmentRelationship>(json);

        // Assert
        Assert.NotNull(exploitCatalogVulnAssessmentRelationship);
        Assert.Equal(new Uri("urn:ExploitCatalogVulnAssessmentRelationship:402"),
            exploitCatalogVulnAssessmentRelationship.SpdxId);
    }

    [Fact]
    public void ExploitCatalogVulnAssessmentRelationship_MinimalObject_ShouldSerialize()
    {
        // Arrange
        var vulnerability = new Vulnerability(TestCatalog, TestCreationInfo);
        var packages = new List<Element> { new Package(TestCatalog, TestCreationInfo) };
        var exploitCatalogVulnAssessmentRelationship = new ExploitCatalogVulnAssessmentRelationship(TestCatalog,
            TestCreationInfo, vulnerability, packages, ExploitCatalogType.kev, true, new Uri("urn:locator"));
        const string expected = """
                                {
                                  "security_catalogType": "kev",
                                  "security_exploited": true,
                                  "security_locator": "urn:locator",
                                  "from": "urn:Vulnerability:40f",
                                  "relationshipType": "hasAssessmentFor",
                                  "to": [
                                    "urn:Package:41c"
                                  ],
                                  "creationInfo": "urn:CreationInfo:3f5",
                                  "type": "security_ExploitCatalogVulnAssessmentRelationship",
                                  "spdxId": "urn:ExploitCatalogVulnAssessmentRelationship:429"
                                }
                                """;

        // Act
        var json = ToJson(exploitCatalogVulnAssessmentRelationship);

        // Assert
        Assert.Equal(expected, json);
    }

    [Fact]
    public void ExploitCatalogVulnAssessmentRelationship_PopulatedObject_ShouldSerialize()
    {
        // Arrange
        var vulnerability = new Vulnerability(TestCatalog, TestCreationInfo);
        var packages = new List<Element> { new Package(TestCatalog, TestCreationInfo) };
        var exploitCatalogVulnAssessmentRelationship = new ExploitCatalogVulnAssessmentRelationship(TestCatalog,
            TestCreationInfo, vulnerability, packages, ExploitCatalogType.kev, true, new Uri("urn:locator"))
        {
            ModifiedTime = PredictableDateTime.AddDays(1),
            PublishedTime = PredictableDateTime.AddDays(2),
            WithdrawnTime = PredictableDateTime.AddDays(3),
            SuppliedBy = new Person(TestCatalog, TestCreationInfo),
            Comment = "a comment",
            Description = "a description",
            Summary = "a summary",
            Name = "a name"
        };
        exploitCatalogVulnAssessmentRelationship.Extension.Add(new ExtensionConcreteTestFixture(TestCatalog));
        exploitCatalogVulnAssessmentRelationship.ExternalIdentifier.Add(new ExternalIdentifier(TestCatalog,
            ExternalIdentifierType.email, "example@example.com"));
        exploitCatalogVulnAssessmentRelationship.ExternalRef.Add(new ExternalRef(TestCatalog,
            ExternalRefType.documentation));
        exploitCatalogVulnAssessmentRelationship.VerifiedUsing.Add(new Hash(TestCatalog, HashAlgorithm.md2, "123"));

        const string expected = """
                                {
                                  "security_catalogType": "kev",
                                  "security_exploited": true,
                                  "security_locator": "urn:locator",
                                  "security_modifiedTime": "2025-02-23T01:23:45Z",
                                  "security_publishedTime": "2025-02-24T01:23:45Z",
                                  "security_suppliedBy": "urn:Person:436",
                                  "security_withdrawnTime": "2025-02-25T01:23:45Z",
                                  "from": "urn:Vulnerability:40f",
                                  "relationshipType": "hasAssessmentFor",
                                  "to": [
                                    "urn:Package:41c"
                                  ],
                                  "comment": "a comment",
                                  "creationInfo": "urn:CreationInfo:3f5",
                                  "description": "a description",
                                  "extension": [
                                    "urn:ExtensionConcreteTestFixture:443"
                                  ],
                                  "externalIdentifier": [
                                    "urn:ExternalIdentifier:450"
                                  ],
                                  "externalRef": [
                                    "urn:ExternalRef:45d"
                                  ],
                                  "name": "a name",
                                  "summary": "a summary",
                                  "verifiedUsing": [
                                    "urn:Hash:46a"
                                  ],
                                  "type": "security_ExploitCatalogVulnAssessmentRelationship",
                                  "spdxId": "urn:ExploitCatalogVulnAssessmentRelationship:429"
                                }
                                """;

        // Act
        var json = ToJson(exploitCatalogVulnAssessmentRelationship);

        // Assert
        Assert.Equal(expected, json);
    }
}